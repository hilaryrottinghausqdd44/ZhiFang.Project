在“添加删除”里面选择删除"visual studio 2005",然后在打开的窗口中选择最后一项“添加注册码升级到正式版”，在里面输入下面的cd－key（http://board.VeryCD.com/t260353-50.html 里找fku发的，特别感谢fku），然后点升级就OK了！
SN:KYTYH-TQKW6-VWPBQ-DKC8F-HWC4J



简介
今天，企业要获得成功，就必须正视构建和维护日益复杂的信息技术 (IT) 解决方案的需求。此外，他们还要借助于新技术来拓展业务功能并开发全新的业务机会。自 IT 部门接受了技术支持任务的那一刻起，他们便成为绝大部分业务策略中的关键角色。 

企业当然希望能从他们在 IT 项目的投资中获得最大利润，这就意味着 IT 部门需要在越来越大的压力下多快好省地完成工作。对更高成本效益的追求使得 IT 项目的预见性需求日渐增加。然而，这样做通常造成繁琐的过程和对成本消耗的监控，这只不过是将费用转嫁到不同的问题。付出的代价是开发机会的时间投入以及膨胀的 IT 预算。

复杂的应用程序需要多支训练有素的开发团队来实现。对于开发团队作出的任何主要承诺来说，信息交流都是成功的一个基本元素。新的 Visual Studio Team System 扩展了 Microsoft 的优秀功能，即，通过提供与业务紧密集成的、可扩展的、能够增加成功几率的生命周期工具，从而为用户提供高效的工具。能否成功主要取决于，为了降低交付解决方案的复杂性，团队间是否进行了充分的交流。

返回页首
构建 IT 解决方案的挑战
尽管许多 IT 解决方案项目的工作产品是软件，但生成软件并不是项目的目标。相反，软件是实现目标的手段 ― 驱动不同的业务价值。要应对风险并增加成功的可预见性，大多数 IT 部门转而采用各种各样的工具和过程来支持 SDLC。大部分旨在提高软件开发效率的尝试均不尽如人意。这些尝试要么在实现时过于繁琐，并未达到预期的目标，要么根本无法切中团队开发中令人感到苦恼的要害问题。 

? 信息交流：重要的大型应用程序由团队构建，这其中有大量可能从未编写过代码的参与者，包括：业务发起人、项目管理者、架构师以及测试人员。更甚之，团队本身已演变为地理上分布更广且更专业化。角色的差异导致许多问题无从解决，或者无意识地对计划产生了分歧。为了使团队有效地运转，就必须理顺信息交流流程，而且必须让它与成员的日常工作行为相吻合。 

? 工具捆绑：近些年来，在 SDLC 工具领域中已经大量使用了捆绑手法。但是，仅仅是捆绑工具集合并不能实现工具集成。这只是建立工具包。由于角色限制，非集成工具（无法支持工具间的自动数据流）之间就产生了矛盾。集成性的匮乏就必须通过手工乾预进行弥补，而由此可能产生其他一些问题。在数据层进行集成，能够使数据流自动化跨工具和常规报告实现。 

? 不合适的过程：使过程采纳变得复杂的原因是存在一个矛盾，即开发人员在许多生命周期过程中既是最关键的一环，又是最薄弱的一环。不适合团队成员（特别是整个开发团体）工作风格的过程，将遭遇到明显地阻力。面临的挑战就是平衡可预见、可重复过程的生产效率和创新。当未形成这种平衡时，每一个人都挣扎于成本消耗与实现任务目标的矛盾之中。多数过程都以文档为中心。在这种情况下，他们需要额外付出超出维护日常活动的正常流之外的努力。无论团队使用特定的、灵活的或者常规的过程，每一支团队都可以受益于自动且集成的软件开发过程。 

? 另人失望的投资回报 (ROI)：站在 CIO 的角度看，痛苦的抉择在于，在开发活动和工具方面不断投入的、天文数字的 IT 预算换来的却是另人失望的投资回报。大多数采纳过程和 SDLC 工具的尝试之所以困难重重，原因在于其陡峭的学习曲线、缺乏工具集成、高额的前期投入费用、持续的维护、特殊技能需求以及对专门的管理员的需求。结果，包含 SDLC 工具的总拥有成本是难以负担的。因此，CIO 面临一个难题 ― 证明既然费用支出不会再涉及任意可估计到的因素，那么他们的费用支出就是合理的。 


返回页首
改进软件开发生命周期
当 Microsoft 首先发布 Visual Basic 之时，就通过降低其复杂度从而使 Windows 软件开发得以广泛应用。利用 Visual Basic 6.0，Microsoft 让数以百万计的开发人员能够快速开发客户端/服务器应用程序。最近，利用 Visual Studio .NET，Microsoft 又为开发人员提供了轻松开发分布式应用程序的工具与技术。通过 Visual Studio 2005 Team System，Microsoft 正在解决日益增加的应用程序复杂性及其设计、开发和部署所必需的生命周期问题。这一点是通过提供必需的工具和指导从而能够预见、重复结果（无需付出生产效率和创新的代价）实现的。 

? 信息交流：通过降低报告的运转开销和寻觅团队成员间新的交流渠道，Visual Studio Team System 着重于能够更好地进行交流。例如： 

? 通过自动从团队成员使用的工具那里收集信息，可以简化报告过程。从 Visual Studio Team System 采集到的数据保存在数据仓库中，这使项目状态报告和可见性能够面向软件开发团队的所有成员，甚至是项目组之外的乾系人。 

? 项目经理能够将客户需求转化为开发团队中的工作项，然后跟踪工作项的状态以实现项目状态的监控。 

? 分布式系统设计器 (Distributed System Designer) 将应用程序开发和部署需求转化为能够让开发人员和操作进行交流的公共语言 (SDM)。 


? 集成的工具：Visual Studio 的成功已被证实，即开发人员偏爱一个具备对他们需要的工具提供接口的集成开发环境。通过将开发人员在开发环境中需要的测试和性能工具（例如，单元测试、代码分析和性能分析）合并在一起，Visual Studio Team System 也期待着这种成功。这使开发人员能够在生命周期的较早阶段就改善其代码的质量，而无需中断他们的工作。通过尽早地为开发人员提供他们需要用于识别和解决质量问题的工具，更多的产品缺陷就能够在它们还未构成危害之前即被发现并解决。 

? 简化的、集成的工作流和过程：有了 Visual Studio Team System，那么过程就不仅仅是文档了。它还能将自己体现为实际的工具行为更改。当您在项目初期选择过程时，还需要选择工作流和工作产品，它们会驱动系统的行为方式。对 SDLC 过程的支持是内置的，这使得对工作流的支持是无缝的。通过将过程集成到团队成员日常使用的基本工具中，Visual Studio Team System 大大消除了过程采纳的障碍，并使自动收集跨职能的项目标准成为可能，而无需实施人工报告的相关开销。 

? 增加的投资回报：利用信息交流和生产效率的改进，企业将明显地看到针对其在 SDLC 工具和过程方面的投资而增加的 ROI。Visual Studio Team System 提供一个具有成本效益的解决方案，从而通过使用跨所有 SDLC 工具的广泛集成，实现对软件开发生命周期的管理。通过提供集成的工具集并基于现有知识进行构建，Visual Studio Team System 提供一个友好的环境来帮助开发团队提高效率，而无需掌握不必要的、复杂的概念和僵化的工具。 


返回页首
集成
通过将 SDLC 工具集成到 UI 级别的表面，Visual Studio Team System 提高了团队工作效率并增强了项目的可预见性，下面说明数据级别表面以及过程级别的项目上下文。 

? 用户界面集成：工具间的无缝集成是增强生产效率的关键。Visual Studio Team System 提供跨整个 SDLC 工具套件的、一致的用户体验。对于开发人员而言，可以在他们当前的开发环境中使用某些活动（例如，单元测试、工作项跟踪、代码剖析以及代码分析）。 

? 数据集成：通过使用一个公共的跨工具集的数据仓库，Visual Studio Team System 解决了在大多数 SDLC 工具中建立数据仓库这一问题，并启动了一个聚合的项目状态视图。团队根据能够收集到的规则来管理项目。今天，数据主要限于缺陷跟踪。Visual Studio Team System 中集成的数据将开创一条新路 ― 通过平衡利用贯穿于 SDLC 的大量、多样的数据来管理项目规则。Visual Studio Team System 会收集精确的数据 ― 不仅限于缺陷跟踪，而是包括测试结果、代码涵盖、代码生成、任务进度等这些贯穿于团队常规工作流程的数据。该数据以某些标准的报告方式呈现，客户和 Microsoft 内部团队已在报告中建立了成功项目管理的关键规则。此外，团队还能够创建自定义报告。仅当以项目的大范围上下文查看数据时，团队才能够精确地报告项目状态。 

? 过程集成：在 Visual Studio Team System 中，工具行为由项目开始时选择的过程决定。通过将过程与工具相集成，Visual Studio Team System 帮助确保在项目各阶段之间或各种项目角色之间避免丢失任何内容。通过自动处理团队成员之间的工作调整，可以提高团队效率。公司通过使过程标准化，能够纠正贯穿于过程改进中的系统问题，而无需增加团队的工作量。此外，过程集成并不增加工作量，而通常能够降低与 SDLC 中所采纳过程相关的开销。 


返回页首
扩展性
尽管存在一些基本的工具可组成 SDLC 工具（例如，架构师工具、测试工具等），但是 SDLC 并未限制住工具的数量。当集成支持 SDLC 的工具时，团队会发现在提高团队效率，同时降低复杂性这些方面的好处。Visual Studio Team System 将提供基本的平台，让所有提供商能够以一种普通的、公众可理解的形式交换信息。这理所当然地铸造了一个充满活力的合作伙伴体系，合作伙伴能够构建完全集成的工具，简化构建 IT 解决方案的复杂性，以及推动信息交流和鼓励团队协作。要获得跨 UI、数据和过程集成的最大价值，就需要扩展性。扩展性促成交互性。

Visual Studio Team System 设计基础是扩展性模型。Microsoft 提供的 SDLC 工具利用与第三方可用的扩展性功能相同的扩展性功能。扩展性体现在集成的三个层次：UI、数据和过程。 

? 用户界面扩展性：Visual Studio Team System 利用现有的 Visual Studio Industry Partner (VSIP) 计划，将补充的产品和服务插入到 Visual Studio 集成开发环境 (IDE) 之中。 

? 数据扩展性：Visual Studio Team System 利用 Visual Studio Team Foundation Core Services (TFCS) 将这些工具集成在一起。TFCS 提供一组能够将工具集成在一起的工具，无需工具间的紧密耦合。对于数据收集，TFCS 还能够将第三方工具用于由 Visual Studio Team System 使用的数据仓库。 

? 过程扩展性：Visual Studio Team System 使用方法论模板来定义每个项目将遵循的过程。不存在适用于所有组织、以至一个组织内的所有项目的通用过程。不要为此担心，Visual Studio Team System 是一个灵活的工具集，它采用即灵活又正规的过程。Microsoft 的 Global Solution Integrator 合作伙伴将提供他们自己的方法论模板产品；或者，您可以自己创建模板。过程扩展性允许自定义工作项类型、签入策略、自定义报告以及项目管理模板。 


有关详细信息，请参阅 Visual Studio 2005 Team System：Microsoft Solutions Framework 和 Visual Studio 2005 Team System:扩展套件。

返回页首
Microsoft Visual Studio 2005 Team System 
Microsoft Visual Studio 2005 Team System 提供支持整个软件开发团队的工具： 

? 架构师：Visual Studio 2005 Team Architect Edition 包括集成、高效的工具，用于直观地构建面向服务的解决方案，这些解决方案从部署环境的初始状态开始设计。有关详细信息，请参阅 Visual Studio 2005 Team System：设计分布式系统以进行部署。 

? 开发人员：Visual Studio 2005 Team Developer Edition 为开发人员提供高级的静态分析、代码剖析、代码涵盖以及单元测试工具，使团队能够在整个生命周期中尽早、频繁地规划质量。有关详细信息，请参阅 Visual Studio 2005 Team System：构建健壮而可靠的软件。 

? 测试人员：Visual Studio 2005 Team Test Edition 构建于开发人员版本之上，更好地为测试人员提供了用于管理和运行各种测试（包括单元测试、手工测试和 Web 测试）的工具，以及使团队能够在应用程序部署之前检验其性能的高级负载测试工具。有关详细信息，请参阅 Visual Studio 2005 Team System：通过更完善的测试实现更好的软件。 

? 项目管理人员：Visual Studio 2005 Team Foundation 提供一套基于软件项目管理人员已知内容的项目管理工具：Microsoft Excel、Microsoft Project 和 Windows SharePoint Services。与 Microsoft Office 集成，项目管理人员不再需要手工将数据从这些应用程序映射到供工程团队使用的数据。项目站点提供仪表盘式的项目状态视图，以及向下追溯风险承担者的功能。丰富的报告提供了从整个常规的团队工作流中收集的规则。自定义项目过程基于业界公认的实践来驱动生命周期。有关详细信息，请参阅 Visual Studio 2005 Team System：软件项目管理。 

? 团队开发：Visual Studio 2005 Team Foundation 还提供团队协作工具，使组织能够不费吹灰之力即可管理并跟踪过程和软件项目的运行状况。Portfolio Explorer 将可从项目站点获得的这些相同的项目工作产品集成到 Visual Studio IDE，从而让团队能够进行有效的访问。Visual Studio 2005 Team Foundation 还提供一个可扩展的工作项跟踪系统和企业级别的源代码管理。有关详细信息，请参阅 Visual Studio 2005 Team System：企业级源代码管理和工作项跟踪。 


